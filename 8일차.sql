CREATE TABLE HEIGHT_INFO AS
SELECT STUDNO ,NAME ,HEIGHT FROM STUDENT s WHERE 1=0;

CREATE TABLE WEIGHT_INFO AS
SELECT STUDNO ,NAME ,WEIGHT FROM STUDENT s WHERE 1=0;


SELECT * FROM HEIGHT_INFO;
SELECT * FROM WEIGHT_INFO;

TRUNCATE TABLE HEIGHT_INFO;
TRUNCATE TABLE WEIGHT_INFO;


--2학년 이상의 학생, 
--HEIGHT_INFO에는 학번, 이름, 키, 
--WHEGHT_INFO에는 학번 이름 체중을 입력

INSERT ALL 
INTO HEIGHT_INFO VALUES (STUDNO, NAME ,HEIGHT)
INTO WEIGHT_INFO VALUES (STUDNO, NAME ,WEIGHT)
SELECT STUDNO, NAME, HEIGHT, WEIGHT FROM STUDENT s WHERE GRADE >= '2';


--2학년 이상의 학생, 
--HEIGHT_INFO에는 학번, 이름, 키, 
--WHEGHT_INFO에는 학번 이름 체중을 입력
--INSERT ALL CONDITIONAL
--HEIGHT_INFO에는 170이상만
--WEIGIT_INFO에는 70이상만

INSERT ALL
WHEN HEIGHT >= 170 THEN
	INTO HEIGHT_INFO VALUES (STUDNO, NAME ,HEIGHT)
WHEN WEIGHT >= 70 THEN
	INTO WEIGHT_INFO VALUES (STUDNO, NAME ,WEIGHT)
SELECT STUDNO, NAME, HEIGHT, WEIGHT FROM STUDENT s WHERE GRADE >= '2';


INSERT FIRST
WHEN HEIGHT >= 170 THEN
	INTO HEIGHT_INFO VALUES (STUDNO, NAME ,HEIGHT)
WHEN WEIGHT >= 70 THEN
	INTO WEIGHT_INFO VALUES (STUDNO, NAME ,WEIGHT)
SELECT * FROM STUDENT s WHERE GRADE >= '2';


--PIVOTING
CREATE TABLE SALES(
	SALES_NO NUMBER,
	WEEK_NO NUMBER,
	SALES_MON NUMBER,
	SALES_TUE NUMBER,
	SALES_WED NUMBER,
	SALES_THU NUMBER,
	SALES_FRI NUMBER
);

CREATE TABLE SALES_DATA(
	SALES_NO NUMBER,
	WEEK_NO NUMBER,
	DAY_NO NUMBER,
	SALES NUMBER
);

INSERT INTO SALES VALUES(1101, 4, 100, 150, 80, 60, 120);
INSERT INTO SALES VALUES(1102, 5, 300, 300, 230, 120, 150);

SELECT * FROM SALES;

INSERT ALL
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 1, SALES_MON)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 2, SALES_TUE)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 3, SALES_WED)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 4, SALES_THU)
INTO SALES_DATA VALUES (SALES_NO, WEEK_NO, 5, SALES_FRI)
SELECT * FROM SALES;

SELECT * FROM SALES_DATA ORDER BY WEEK_NO,DAY_NO;
SELECT * FROM SALES_DATA;

--다시 변경. 행은 줄고 컬럼은 늘어난다. 어렵;;
SELECT 
	SALES_NO, 
	WEEK_NO,
	MAX(DECODE(DAY_NO, 1, SALES)) MON,
	MAX(DECODE(DAY_NO, 2, SALES)) TUE,
	MAX(DECODE(DAY_NO, 3, SALES)) WED,
	MAX(DECODE(DAY_NO, 4, SALES)) THU,
	MAX(DECODE(DAY_NO, 5, SALES)) FRI
FROM SALES_DATA
GROUP BY SALES_NO, WEEK_NO
ORDER BY 1;
--이걸 또 다시 변경...??????????!!!!!!!!!!!!-0-....


--UPDATE 1문제나옴
--교수번호가 9903인 교수의 직급을 부교수로 수정
SELECT * FROM PROFESSOR p WHERE PROFNO = 9903;

UPDATE PROFESSOR SET 
	POSITION = '부교수'
WHERE PROFNO = 9903;

--교수번호가 9903인 교수의 데이터 변경
--직급을 전임교수, 아이디를 'littlePascal',급여를 20올린 데이터로 수정

UPDATE PROFESSOR SET 
	POSITION = '전임교수', 	
	USERID = 'litPascal',	
	SAL = SAL + 20
WHERE PROFNO = 9903;

--서브쿼리를 이용하여 학번이 10201인 학생의 학년과 학과 번호를 103학번 학생의 학년과 학과 번호와 동일하게 수정
UPDATE STUDENT 
SET (GRADE, DEPTNO) = 
	(SELECT GRADE, DEPTNO 
	FROM STUDENT s 
	WHERE STUDNO = 10103)
WHERE STUDNO = 10201;

--컴퓨터공학과 소속 학생 데이터 삭제
DELETE
FROM STUDENT s
WHERE DEPTNO = (
	SELECT DEPTNO FROM DEPARTMENT d WHERE DNAME = '컴퓨터공학과'
);

--다시 테이블 만드는 방법
CREATE TABLE T_STU AS
SELECT * FROM STUDENT s ;

DROP TABLE STUDENT;

RENAME T_STU TO STUDENT;




--PROFESSOR_TEMP 테이블 생성, 교수 직급만 가져와서 생성
CREATE TABLE PROFESSOR_TEMP AS
SELECT * FROM PROFESSOR p WHERE POSITION = '교수'; --여기부터 작성

SELECT * FROM PROFESSOR_TEMP;

UPDATE PROFESSOR_TEMP SET 
	POSITION = '명예교수'; --WHERE없어도 상관없을듯 이게전부라~

INSERT INTO PROFESSOR_TEMP VALUES(9999, '김도경','arom','전임강사',200,SYSDATE,10,101);

--MERGE 하려고하는데 교수2명 겹침- UPDATE 김도경은 INSERT로 처리
--외울필요없음
MERGE INTO PROFESSOR p 
	USING PROFESSOR_TEMP PT
	ON (P.PROFNO = PT.PROFNO)
WHEN MATCHED THEN 
	UPDATE SET P.POSITION = PT.POSITION
WHEN NOT MATCHED THEN
	INSERT VALUES(PT.PROFNO, PT.NAME, PT.USERID, PT.POSITION, PT.SAL, PT.HIREDATE, PT.COMM, PT.DEPTNO);

SELECT * FROM PROFESSOR p ;

DELETE FROM PROFESSOR p WHERE POSITION = '명예교수';


--SEQUENCE
--게시판용 테이블 생성

CREATE TABLE BOARD(
	NO NUMBER PRIMARY KEY,
	TITLE VARCHAR(4000),
	CONTENT CLOB,
	WRITER VARCHAR(1000),
	REGDATE DATE DEFAULT SYSDATE
);

CREATE SEQUENCE SEQ_BOARD;
--SEQ_BOARD에는 다음값, 현재값
INSERT INTO BOARD (NO, TITLE, CONTENT, WRITER) VALUES (SEQ_BOARD.NEXTVAL ,'제목','내용','새똥이');

SELECT * FROM BOARD;

--연속적인 숫자를 보고싶을 때
SELECT ROWNUM, B.* FROM BOARD B;

COMMIT;

INSERT INTO BOARD (NO, TITLE, CONTENT, WRITER)
SELECT SEQ_BOARD.NEXTVAL NO, TITLE, CONTENT, WRITER FROM BOARD;


DROP TABLE BOARD;

--기본키는 NOT NULL이라 불가능
INSERT INTO BOARD (NO, TITLE, CONTENT, WRITER) VALUES (NULL ,'제목','내용','새똥이');
--중복도 불가능
INSERT INTO BOARD (NO, TITLE, CONTENT, WRITER) VALUES (1 ,'제목','내용','새똥이');
INSERT INTO BOARD (NO, TITLE, CONTENT, WRITER) VALUES (1 ,'제목','내용','새똥이');



