DROP TABLE STUD_HEAVY ;
DROP  TABLE STUD_101 ;
DROP TABLE EX_TYPE ;

SELECT BIRTHDATE, TO_CHAR(BIRTHDATE, 'YY-MM') 
FROM STUDENT s 
WHERE NAME = '전인하';

--'2024 10월 05 월' 행식으로 102번 학과 학생의 생년월일 출력
SELECT BIRTHDATE ,TO_CHAR(BIRTHDATE, 'YYYY MONTH DD DAY') 
FROM STUDENT s 
WHERE DEPTNO = 102;

--보직수당을 받는 교수들을 대상으로 수당과 급여를 더한 값에 12를 곱하여 
--ANUAL이라는 이름으로 연봉 계산을 하고 세 자리마다 쉼표로 표시
SELECT NAME ,SAL ,COMM,TO_CHAR((SAL+COMM)*12, '9,999') ANUAL 
FROM PROFESSOR p 
WHERE COMM IS NOT NULL;

--문자열 1234를 숫자 데이터로 변환하여라
SELECT 
	TO_NUMBER('1234')
--	, TO_NUMBER('ABCD') 불가능
--  , TO_NUMBER('1,234') 불가능
	, TO_NUMBER('1,234' , '9,999') --포매터 필요 
FROM DUAL;

--학번, 이름, 학과를 출력한다.
--학과번호가
--101이면 컴퓨터 공학과
--102이면 멀티미디어학과
--201이면 전자공학과
--나머지 기계공학과 로 출력
SELECT 
	STUDNO,
	NAME, 
	DEPTNO,
	DECODE(DEPTNO, 	
		101, '컴퓨터공학과',	
		102, '멀티미디어학과',
		201, '전자공학과',
		'기계공학과') DNAME
FROM STUDENT s ;

--교수번호, 이름, 월급, 학과번호, 보너스를 출력한다.
--교수의 소속학과에 따라 보너스 지급, 
--101학과 급여의 10% 
--102학과 20%
--201학과 30%
--나머지 0%
SELECT 
	PROFNO,
	NAME,
	SAL,
	DEPTNO,
	CASE
		WHEN DEPTNO = 101 THEN SAL * 0.1
		WHEN DEPTNO = 102 THEN SAL * 0.2
		WHEN DEPTNO = 201 THEN SAL * 0.3
		ELSE 0 --숫자타입에맞추는것
	END BONUS,
	CASE DEPTNO
		WHEN 101 THEN SAL * 0.1
		WHEN 102 THEN SAL * 0.2
		WHEN 201 THEN SAL * 0.3
		ELSE 0
	END BONUS2
FROM PROFESSOR p;

SELECT COUNT(*)
FROM STUDENT s ;

SELECT COUNT(DEPTNO)
FROM STUDENT s ;

SELECT COUNT(DISTINCT DEPTNO)
FROM STUDENT s ;

SELECT *
FROM PROFESSOR p ;

SELECT COUNT(*)
FROM PROFESSOR p ;

--교수의 인원수, 수당을 받는 인원수, 최대월급, 최소월급을 구하여라
SELECT COUNT(*), COUNT(COMM) , MAX(SAL), MIN(SAL) 
FROM PROFESSOR p ;

SELECT COUNT(*) 
FROM PROFESSOR p 
WHERE COMM IS NOT NULL; --조건을 통해 필터

SELECT *
FROM STUDENT s;

--101학과 학생들의 몸무게 평균 합계 최대키 최소키
SELECT COUNT(*) ,AVG(WEIGHT), SUM(WEIGHT) ,MAX(HEIGHT), MIN(HEIGHT) 
FROM STUDENT s 
WHERE DEPTNO = 101;

--학년별로 몇명인지 구하여라
SELECT GRADE, COUNT(*)
FROM STUDENT s 
GROUP BY GRADE; -- SELECT에서 언급하려면 GROUP BY에 항상 명시

--학년, 학과별 몇명인지 구하여라
SELECT GRADE ,DEPTNO ,COUNT(*) 
FROM STUDENT s 
GROUP BY GRADE ,DEPTNO 
ORDER BY 1, 2;

--학과변호별 교수의 인원수와 수당을 받는 인원수를 조회
--SELECT * 불가능
SELECT DEPTNO ,COUNT(*), COUNT(COMM)  
FROM PROFESSOR p 
GROUP BY DEPTNO;

--학과별로 소속 교수들의 최대급여, 최소급여
SELECT DEPTNO ,MAX(SAL), MIN(SAL) 
FROM PROFESSOR p 
GROUP BY DEPTNO ;

--학생의 학과과 학년을 기준으로
--그룹하여 학과와 학년별 인원수와 평균체중을 구하고 반올림처리
--학과기준으로 정렬
SELECT DEPTNO ,GRADE ,COUNT(*),ROUND(AVG(WEIGHT)) 
FROM STUDENT s 
GROUP BY DEPTNO ,GRADE
ORDER BY DEPTNO ;


--학생의 생년월일을 기준으로 탄생 계절별 인원수구하기
SELECT 
--BIRTHDATE, 
--TO_CHAR(BIRTHDATE , 'MM') , 
--TO_CHAR(BIRTHDATE, 'Q'), 
--TO_CHAR(ADD_MONTHS(BIRTHDATE, -2) , 'Q') 
	CASE TO_CHAR(ADD_MONTHS(BIRTHDATE, -2) , 'Q')
		WHEN '1' THEN '봄'
		WHEN '2' THEN '여름'
		WHEN '3' THEN '가을'
		WHEN '4' THEN '겨울'
	END SEASON
	,COUNT(*)
FROM STUDENT s 
GROUP BY TO_CHAR(ADD_MONTHS(BIRTHDATE, -2) , 'Q');
--처음부터 GROUP BY 하지않아야됨~!
--수식을 칼럼으로만들?! 

 --서브쿼리.. A..변수명과같은...?
SELECT A, COUNT(*) FROM (
	SELECT TO_CHAR(ADD_MONTHS(BIRTHDATE, -2) , 'Q') A
	FROM STUDENT
)
GROUP BY A;


--ROLLUP : 부분합, 축 한방향
--CUBE : 부분합, 양측
----적은비용이 소모됨.

--296PAGE
--ROLL UP : 학과 및 직급별 교수 수, 학과별 교수 수, 전체 교수 수를 구하여라
SELECT DEPTNO ,POSITION,COUNT(*)
FROM PROFESSOR p
GROUP BY ROLLUP(DEPTNO ,POSITION)
ORDER BY 1,2; --ROLLUP특히많이사용됨

--ROLLUP과 똑같은 결과
SELECT DEPTNO ,POSITION ,COUNT(*) 
FROM PROFESSOR p 
GROUP BY DEPTNO ,POSITION
UNION
SELECT DEPTNO ,NULL, COUNT(*) 
FROM PROFESSOR p 
GROUP BY DEPTNO
UNION 
SELECT NULL, NULL, COUNT(*)
FROM PROFESSOR p 
ORDER BY 2;

--CUBE : 학과 및 직급별 교수 수, 학과별 교수 수, 전체 교수 수를 구하여라
SELECT DEPTNO ,POSITION,COUNT(*)
FROM PROFESSOR p
GROUP BY CUBE(DEPTNO ,POSITION)
ORDER BY 1,2;

--GROUPING
SELECT DEPTNO ,GRADE ,COUNT(*) ,GROUPING(DEPTNO), GROUPING(GRADE)
FROM STUDENT
GROUP BY CUBE(DEPTNO , GRADE)
ORDER BY 1,2;

SELECT DEPTNO ,GRADE ,COUNT(*) ,GROUPING(DEPTNO), GROUPING(GRADE)
FROM STUDENT
GROUP BY ROLLUP(DEPTNO , GRADE)
ORDER BY 1,2;

--학생수가 4명 이상인 학년에 대해 학생 평균 신장과 체중을 조회
SELECT GRADE, COUNT(*) 
FROM STUDENT
WHERE 1=1
--WHERE COUNT(*) >=4 그룹관련함수는 WHERE 위치에 올 수도 없다. 그룹에의한 조건이기때문에
GROUP BY GRADE
HAVING COUNT(*) >= 4 
ORDER BY GRADE;

--FROM > WHERE > GROUP > HAVING > SELECT > ORDER 순서로 진행된다
SELECT GRADE, COUNT(*) 
FROM STUDENT
WHERE DEPTNO = 101
GROUP BY GRADE
HAVING COUNT(STUDNO) >= 2 
ORDER BY GRADE;

--101학과가 아닌 학생들의 인원수 조회
SELECT DEPTNO ,COUNT(*)
FROM STUDENT s 
WHERE  DEPTNO  != 101
GROUP BY DEPTNO ;
--HAVING DEPTNO  != 101; 이거보다 WHERE 추천


--중첩함수
--학과별 학생의 평균 몸무게 중 최대값
SELECT DEPTNO, AVG(WEIGHT)
FROM STUDENT s 
GROUP BY DEPTNO ;

SELECT MAX(DEPTNO), MAX(AVG(WEIGHT))
FROM STUDENT s 
GROUP BY DEPTNO ;

SELECT MAX(DEPTNO), MAX(AVG(WEIGHT)) --안됨 안맞음.
FROM STUDENT s 
GROUP BY DEPTNO ;






